{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\front-end\\\\2021\\\\education_react_redux\\\\react-kabzda-1\\\\src\\\\components\\\\Users\\\\UsersContainer.jsx\";\nimport React from 'react';\nimport * as axios from 'axios';\nimport Users from './Users';\nimport Preloader from '../common/Preloader/Preloader.jsx';\nimport { connect } from 'react-redux';\nimport { follow, unFollow, setUsers, setCurrentPage, setTotalUsersCount, setIsFetching } from '../../redux/users_reducer';\n\nclass UsersContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.componentDidMount = () => {\n      this.props.setIsFetching(true);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n        this.props.setUsers(response.data.items);\n        this.props.setTotalUsersCount(response.data.totalCount);\n        this.props.setIsFetching(false);\n      });\n    };\n\n    this.onPageChanged = pageNumber => {\n      this.props.setIsFetching(true);\n      this.props.setCurrentPage(pageNumber);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n        this.props.setUsers(response.data.items);\n        this.props.setIsFetching(false);\n      });\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 30\n        }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n          totalUsersCount: this.props.totalUsersCount,\n          pageSize: this.props.pageSize,\n          currentPage: this.props.currentPage,\n          onPageChanged: this.onPageChanged,\n          users: this.props.users,\n          unFollow: this.props.unFollow,\n          follow: this.props.follow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true);\n    };\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n/* let mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tfollow: (userId) => { dispatch(followActionCreator(userId)) },\r\n\t\tunFollow: (userId) => { dispatch(unFollowActionCreator(userId)) },\r\n\t\tsetUsers: (users) => { dispatch(setUsersActionCreator(users)) },\r\n\t\tsetCurrentPage: (pageNumber) => { dispatch(setCurrentPageAC(pageNumber)) },\r\n\t\tsetTotalUsersCount: (totalCount) => { dispatch(setTotalUsersCountAC(totalCount)) },\r\n\t\tsetIsFetching: (isFetching) => { dispatch(setIsFetchingAC(isFetching)) },\r\n\t}\r\n} */\n\n\nexport default connect(mapStateToProps, {\n  follow,\n  unFollow,\n  setUsers,\n  setCurrentPage,\n  setTotalUsersCount,\n  setIsFetching\n})(UsersContainer);","map":{"version":3,"sources":["D:/front-end/2021/education_react_redux/react-kabzda-1/src/components/Users/UsersContainer.jsx"],"names":["React","axios","Users","Preloader","connect","follow","unFollow","setUsers","setCurrentPage","setTotalUsersCount","setIsFetching","UsersContainer","Component","componentDidMount","props","get","currentPage","pageSize","then","response","data","items","totalCount","onPageChanged","pageNumber","render","isFetching","totalUsersCount","users","mapStateToProps","state","usersPage"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport * as axios from 'axios'\r\nimport Users from './Users'\r\nimport Preloader from '../common/Preloader/Preloader.jsx'\r\nimport { connect } from 'react-redux'\r\nimport { follow, unFollow, setUsers, setCurrentPage, setTotalUsersCount, setIsFetching } from '../../redux/users_reducer'\r\n\r\nclass UsersContainer extends React.Component {\r\n\tcomponentDidMount = () => {\r\n\t\tthis.props.setIsFetching(true)\r\n\t\taxios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n\t\t\t.then(response => {\r\n\t\t\t\tthis.props.setUsers(response.data.items)\r\n\t\t\t\tthis.props.setTotalUsersCount(response.data.totalCount)\r\n\t\t\t\tthis.props.setIsFetching(false)\r\n\t\t\t})\r\n\t}\r\n\r\n\tonPageChanged = (pageNumber) => {\r\n\t\tthis.props.setIsFetching(true)\r\n\t\tthis.props.setCurrentPage(pageNumber)\r\n\t\taxios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\r\n\t\t\t.then(response => {\r\n\t\t\t\tthis.props.setUsers(response.data.items)\r\n\t\t\t\tthis.props.setIsFetching(false)\r\n\t\t\t})\r\n\t}\r\n\r\n\trender = () => {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t{this.props.isFetching ? <Preloader /> : null}\r\n\t\t\t\t<Users totalUsersCount={this.props.totalUsersCount}\r\n\t\t\t\t\tpageSize={this.props.pageSize}\r\n\t\t\t\t\tcurrentPage={this.props.currentPage}\r\n\t\t\t\t\tonPageChanged={this.onPageChanged}\r\n\t\t\t\t\tusers={this.props.users}\r\n\t\t\t\t\tunFollow={this.props.unFollow}\r\n\t\t\t\t\tfollow={this.props.follow} />\r\n\t\t\t</>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tusers: state.usersPage.users,\r\n\t\tpageSize: state.usersPage.pageSize,\r\n\t\ttotalUsersCount: state.usersPage.totalUsersCount,\r\n\t\tcurrentPage: state.usersPage.currentPage,\r\n\t\tisFetching: state.usersPage.isFetching,\r\n\t}\r\n}\r\n\r\n/* let mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tfollow: (userId) => { dispatch(followActionCreator(userId)) },\r\n\t\tunFollow: (userId) => { dispatch(unFollowActionCreator(userId)) },\r\n\t\tsetUsers: (users) => { dispatch(setUsersActionCreator(users)) },\r\n\t\tsetCurrentPage: (pageNumber) => { dispatch(setCurrentPageAC(pageNumber)) },\r\n\t\tsetTotalUsersCount: (totalCount) => { dispatch(setTotalUsersCountAC(totalCount)) },\r\n\t\tsetIsFetching: (isFetching) => { dispatch(setIsFetchingAC(isFetching)) },\r\n\t}\r\n} */\r\n\r\nexport default connect(mapStateToProps,\r\n\t{ follow, unFollow, setUsers, setCurrentPage, setTotalUsersCount, setIsFetching })(UsersContainer);"]},"metadata":{},"sourceType":"module"}